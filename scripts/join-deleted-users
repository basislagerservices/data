#!/usr/bin/env python
#
# Copyright 2023 Basislager Services
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#


"""Join the current ranking file with it's history to detect deleted users.

This works for all rankings which contain a user ID.
"""

import argparse
import contextlib
import json
import re
import subprocess as sp
import os
import sys


SCRIPTDIR = os.path.dirname(os.path.abspath(__file__))


def main():
    parser = argparse.ArgumentParser()
    parser.parse_args()

    rankingpath = os.path.relpath(
        os.path.join(SCRIPTDIR, "..", "ranking", "ranking.json")
    )
    with open(rankingpath) as fp:
        current_ranking = json.load(fp)

    # Get list of commits to the ranking file.
    commits = sp.run(
        ["git", "log", "--pretty=%h", rankingpath],
        capture_output=True,
        encoding="utf8",
    ).stdout.splitlines()

    # Join user mappings until we reach the point where we can't get the user ID,
    # starting with the current ranking.
    usermap = {u["id"]: u["name"] for u in current_ranking["users"]}
    for commit in commits:
        result = sp.run(
            ["git", "show", f"{commit}:{rankingpath}"],
            capture_output=True,
            encoding="utf8",
        )
        try:
            ranking = json.loads(result.stdout)
            usermap.update({u["id"]: u["name"] for u in ranking["users"]})
        except KeyError:
            break

    # Update and write the joined ranking.
    for entry in current_ranking["users"]:
        if entry["name"] == "gel√∂schter User":
            with contextlib.suppress(KeyError):
                entry["name"] = usermap[entry["id"]]

    with open(rankingpath, "w") as fp:
        json.dump(current_ranking, fp, indent=4)


if __name__ == "__main__":
    sys.exit(main())
