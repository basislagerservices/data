#!/usr/bin/env python
#
# Copyright 2023-2024 Basislager Services
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

import argparse
import asyncio
import contextlib
import datetime as dt
import json
import os
import random
import sys

import dateutil.parser as dateparser

from dstclient import *

import tqdm

import pytz


SCRIPTDIR = os.path.dirname(os.path.abspath(__file__))
POSTINGFILE = os.path.join(SCRIPTDIR, "..", "postle", "postings.json")


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--window",
        "-w",
        type=int,
        default=7,
        help="days to select postings",
    )
    parser.add_argument(
        "--number-of-postings",
        "-n",
        type=int,
        required=True,
        help="number of postings to select",
    )
    parser.add_argument(
        "--start-date",
        "-s",
        type=dateparser.parse,
        default=dt.datetime.now() + dt.timedelta(days=1),
        help="starting date the selected postings are published",
    )
    parser.add_argument(
        "--tickers",
        "-t",
        action="append",
        required=True,
        type=int,
        help="tickers to crawl",
    )
    args = parser.parse_args()

    startdate = dt.datetime.now().astimezone(pytz.utc) - dt.timedelta(days=args.window)

    def thread_filter(t: Thread):
        return t.published > startdate

    def posting_filter(p: Posting):
        return (
            p.parent_id is None
            and p.message
            and len(p.message.split()) > 5
            and (dt.time(6) <= p.published.time() <= dt.time(22))
            and "http" not in p.message
        )

    postings: list[Posting] = []
    async with WebAPI() as api:
        for ticker_id in tqdm.tqdm(args.tickers):
            ticker = await api.get_ticker(ticker_id)
            threads = api.get_ticker_threads(ticker)
            for thread in tqdm.tqdm([t async for t in threads if thread_filter(t)]):
                postings.extend([p async for p in api.get_thread_postings(thread)])

    postings = [p for p in postings if posting_filter(p)]
    choices = random.choices(postings, k=args.number_of_postings)

    # Read the current postings dict.
    postle = dict()
    with contextlib.suppress(FileNotFoundError):
        with open(POSTINGFILE, "r") as fp:
            postle = json.load(fp)

    date = args.start_date.date()
    for p in choices:
        postle[date.isoformat()] = {
            "user": p.user.name,
            "title": p.title,
            "message": p.message,
            "upvotes": p.upvotes,
            "downvotes": p.downvotes,
        }
        date += dt.timedelta(days=1)

    with open(POSTINGFILE, "w") as fp:
        json.dump(postle, fp, indent=4)


if __name__ == "__main__":
    sys.exit(asyncio.run(main()))
