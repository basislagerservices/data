#!/usr/bin/env python
#
# Copyright 2023 Basislager Services
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#


"""Find users who were deleted since the user ID was added to the ranking."""

import argparse
import contextlib
import json
import re
import subprocess as sp
import os
import sys


SCRIPTDIR = os.path.dirname(os.path.abspath(__file__))


def main():
    parser = argparse.ArgumentParser()
    parser.parse_args()

    rankingpath = os.path.relpath(
        os.path.join(SCRIPTDIR, "..", "ranking", "ranking.json")
    )

    # We are only interested in users who are deleted in the current ranking.
    # This ways we can still highlight them in the ranking.
    with open(rankingpath) as fp:
        current_ranking = json.load(fp)
        usermap = {u["id"]: u["name"] for u in current_ranking["users"]}
        current_usermap = usermap.copy()

    # Get list of commits to the ranking file.
    commits = sp.run(
        ["git", "log", "--pretty=%h", rankingpath],
        capture_output=True,
        encoding="utf8",
    ).stdout.splitlines()

    # Join user IDs going back in time.
    for commit in commits:
        result = sp.run(
            ["git", "show", f"{commit}:{rankingpath}"],
            capture_output=True,
            encoding="utf8",
        )
        try:
            ranking = json.loads(result.stdout)
            usermap.update({u["id"]: u["name"] for u in ranking["users"]})
        except KeyError:
            break

    # Remove all users who are known in the current map or unknown in the
    # cumulative map from the cumulative map.
    # We end up with a map of really deleted users so we can mark them in the ranking.
    def remove(id, name):
        return current_usermap[id] != "gelöschter User" or name == "gelöschter User"

    usermap = {k: v for k, v in usermap.items() if not remove(k, v)}

    with open(os.path.join(SCRIPTDIR, "..", "ranking", "deleted-auto.json"), "w") as fp:
        json.dump(usermap, fp, indent=4)

    print(f"found {len(usermap)} deleted users")


if __name__ == "__main__":
    sys.exit(main())
